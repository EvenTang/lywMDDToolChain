<%
states = module_stm.states
events = module_stm.events
module_name = module_stm.module_name %>
#include "<%= module_name %>_EventDef.h"

// State definition
enum <%= module_name %>_State { <%  
states.each do |state| %>
    ST_<%= state %>,<% 
end %>
    ST_STATE_MAX
};

// Event definition
enum <%= module_name %>_Event { <% 
temp_events = events.to_a.sort {|a,b| a.name <=> b.name}
temp_events.each do |event| %>
    EV_<%= event.name %>,<% 
end %>
    EV_EVENT_MAX
};

void <%= module_name %>_SetStatus(<%= module_name %>_State state);

<%= module_name %>_State <%= module_name %>_GetStatus();

<%
states.each do |state| %>
/* Event callback of <%= module_name %> Module,
 * All state response for State :<%= state %> 
 */<%    
     events.each do |event|
%>
STM_Status <%= module_name %>_ECB_<%= state %>_<%= event.name %>(<%= module_name %>Event const & _msg);<%  
    end %>
<%
end %>

// State-Event Callback Matrix
typedef STM_Status (FP_<%= module_name %>_ECB)(<%= module_name %>Event & _msg); 
FP_<%= module_name %>_ECB const <%= module_name %>_state_ecb_map[][] = { <% 
    states.each do |state| %>
	{ <% 
        events.each do |event| %>
		<%= module_name %>_ECB_<%= state %>_<%= event.name %>, <% 
        end %>
	}, <%
end
%>
}; 


