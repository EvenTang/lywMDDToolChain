// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemCtrlMessageDef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SystemCtrlMessageDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SetTemperatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetTemperature>
     _instance;
} _SetTemperature_default_instance_;
class SetTemperatureResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetTemperatureResult>
     _instance;
} _SetTemperatureResult_default_instance_;
class ShowTemperatureResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowTemperatureResult>
     _instance;
} _ShowTemperatureResult_default_instance_;
class PowerOffResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PowerOffResult>
     _instance;
} _PowerOffResult_default_instance_;
class TurnOffDisplayResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TurnOffDisplayResult>
     _instance;
} _TurnOffDisplayResult_default_instance_;
class PowerOnResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PowerOnResult>
     _instance;
} _PowerOnResult_default_instance_;
class SystemCtrlMessaggeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SystemCtrlMessagge>
     _instance;
  const ::SetTemperature* msg_set_temperature_;
  const ::SetTemperatureResult* msg_set_temperature_result_;
  const ::ShowTemperatureResult* msg_show_temperature_result_;
  const ::PowerOffResult* msg_power_off_result_;
  const ::TurnOffDisplayResult* msg_turn_off_display_result_;
  const ::PowerOnResult* msg_power_on_result_;
} _SystemCtrlMessagge_default_instance_;

namespace protobuf_SystemCtrlMessageDef_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemperature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemperature, new_temp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemperatureResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemperatureResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemperatureResult, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTemperatureResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTemperatureResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowTemperatureResult, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerOffResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerOffResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerOffResult, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnOffDisplayResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnOffDisplayResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnOffDisplayResult, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerOnResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerOnResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerOnResult, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCtrlMessagge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCtrlMessagge, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCtrlMessagge, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCtrlMessagge, message_id_),
  offsetof(SystemCtrlMessaggeDefaultTypeInternal, msg_set_temperature_),
  offsetof(SystemCtrlMessaggeDefaultTypeInternal, msg_set_temperature_result_),
  offsetof(SystemCtrlMessaggeDefaultTypeInternal, msg_show_temperature_result_),
  offsetof(SystemCtrlMessaggeDefaultTypeInternal, msg_power_off_result_),
  offsetof(SystemCtrlMessaggeDefaultTypeInternal, msg_turn_off_display_result_),
  offsetof(SystemCtrlMessaggeDefaultTypeInternal, msg_power_on_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCtrlMessagge, msg_body_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(SetTemperature)},
  { 7, 13, sizeof(SetTemperatureResult)},
  { 14, 20, sizeof(ShowTemperatureResult)},
  { 21, 27, sizeof(PowerOffResult)},
  { 28, 34, sizeof(TurnOffDisplayResult)},
  { 35, 41, sizeof(PowerOnResult)},
  { 42, 55, sizeof(SystemCtrlMessagge)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetTemperature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetTemperatureResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowTemperatureResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PowerOffResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TurnOffDisplayResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PowerOnResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SystemCtrlMessagge_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SystemCtrlMessageDef.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SetTemperature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetTemperature_default_instance_);_SetTemperatureResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetTemperatureResult_default_instance_);_ShowTemperatureResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowTemperatureResult_default_instance_);_PowerOffResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PowerOffResult_default_instance_);_TurnOffDisplayResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TurnOffDisplayResult_default_instance_);_PowerOnResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PowerOnResult_default_instance_);_SystemCtrlMessagge_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SystemCtrlMessagge_default_instance_);_SystemCtrlMessagge_default_instance_.msg_set_temperature_ = const_cast< ::SetTemperature*>(
      ::SetTemperature::internal_default_instance());
  _SystemCtrlMessagge_default_instance_.msg_set_temperature_result_ = const_cast< ::SetTemperatureResult*>(
      ::SetTemperatureResult::internal_default_instance());
  _SystemCtrlMessagge_default_instance_.msg_show_temperature_result_ = const_cast< ::ShowTemperatureResult*>(
      ::ShowTemperatureResult::internal_default_instance());
  _SystemCtrlMessagge_default_instance_.msg_power_off_result_ = const_cast< ::PowerOffResult*>(
      ::PowerOffResult::internal_default_instance());
  _SystemCtrlMessagge_default_instance_.msg_turn_off_display_result_ = const_cast< ::TurnOffDisplayResult*>(
      ::TurnOffDisplayResult::internal_default_instance());
  _SystemCtrlMessagge_default_instance_.msg_power_on_result_ = const_cast< ::PowerOnResult*>(
      ::PowerOnResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032SystemCtrlMessageDef.proto\"\"\n\016SetTempe"
      "rature\022\020\n\010new_temp\030\001 \001(\005\"b\n\024SetTemperatu"
      "reResult\022,\n\006result\030\001 \001(\0162\034.SetTemperatur"
      "eResult.Result\"\034\n\006Result\022\006\n\002OK\020\000\022\n\n\006Fail"
      "ed\020\001\"d\n\025ShowTemperatureResult\022-\n\006result\030"
      "\001 \001(\0162\035.ShowTemperatureResult.Result\"\034\n\006"
      "Result\022\006\n\002OK\020\000\022\n\n\006Failed\020\001\"V\n\016PowerOffRe"
      "sult\022&\n\006result\030\001 \001(\0162\026.PowerOffResult.Re"
      "sult\"\034\n\006Result\022\006\n\002OK\020\000\022\n\n\006Failed\020\001\"b\n\024Tu"
      "rnOffDisplayResult\022,\n\006result\030\001 \001(\0162\034.Tur"
      "nOffDisplayResult.Result\"\034\n\006Result\022\006\n\002OK"
      "\020\000\022\n\n\006Failed\020\001\"T\n\rPowerOnResult\022%\n\006resul"
      "t\030\001 \001(\0162\025.PowerOnResult.Result\"\034\n\006Result"
      "\022\006\n\002OK\020\000\022\n\n\006Failed\020\001\"\376\002\n\022SystemCtrlMessa"
      "gge\022\022\n\nmessage_id\030\001 \002(\005\022.\n\023msg_set_tempe"
      "rature\030\002 \001(\0132\017.SetTemperatureH\000\022;\n\032msg_s"
      "et_temperature_result\030\003 \001(\0132\025.SetTempera"
      "tureResultH\000\022=\n\033msg_show_temperature_res"
      "ult\030\004 \001(\0132\026.ShowTemperatureResultH\000\022/\n\024m"
      "sg_power_off_result\030\005 \001(\0132\017.PowerOffResu"
      "ltH\000\022<\n\033msg_turn_off_display_result\030\006 \001("
      "\0132\025.TurnOffDisplayResultH\000\022-\n\023msg_power_"
      "on_result\030\007 \001(\0132\016.PowerOnResultH\000B\n\n\010msg"
      "_body"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 925);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SystemCtrlMessageDef.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_SystemCtrlMessageDef_2eproto

const ::google::protobuf::EnumDescriptor* SetTemperatureResult_Result_descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_enum_descriptors[0];
}
bool SetTemperatureResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SetTemperatureResult_Result SetTemperatureResult::OK;
const SetTemperatureResult_Result SetTemperatureResult::Failed;
const SetTemperatureResult_Result SetTemperatureResult::Result_MIN;
const SetTemperatureResult_Result SetTemperatureResult::Result_MAX;
const int SetTemperatureResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ShowTemperatureResult_Result_descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_enum_descriptors[1];
}
bool ShowTemperatureResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ShowTemperatureResult_Result ShowTemperatureResult::OK;
const ShowTemperatureResult_Result ShowTemperatureResult::Failed;
const ShowTemperatureResult_Result ShowTemperatureResult::Result_MIN;
const ShowTemperatureResult_Result ShowTemperatureResult::Result_MAX;
const int ShowTemperatureResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PowerOffResult_Result_descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_enum_descriptors[2];
}
bool PowerOffResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerOffResult_Result PowerOffResult::OK;
const PowerOffResult_Result PowerOffResult::Failed;
const PowerOffResult_Result PowerOffResult::Result_MIN;
const PowerOffResult_Result PowerOffResult::Result_MAX;
const int PowerOffResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TurnOffDisplayResult_Result_descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_enum_descriptors[3];
}
bool TurnOffDisplayResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TurnOffDisplayResult_Result TurnOffDisplayResult::OK;
const TurnOffDisplayResult_Result TurnOffDisplayResult::Failed;
const TurnOffDisplayResult_Result TurnOffDisplayResult::Result_MIN;
const TurnOffDisplayResult_Result TurnOffDisplayResult::Result_MAX;
const int TurnOffDisplayResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PowerOnResult_Result_descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_enum_descriptors[4];
}
bool PowerOnResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerOnResult_Result PowerOnResult::OK;
const PowerOnResult_Result PowerOnResult::Failed;
const PowerOnResult_Result PowerOnResult::Result_MIN;
const PowerOnResult_Result PowerOnResult::Result_MAX;
const int PowerOnResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTemperature::kNewTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTemperature::SetTemperature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetTemperature)
}
SetTemperature::SetTemperature(const SetTemperature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_temp_ = from.new_temp_;
  // @@protoc_insertion_point(copy_constructor:SetTemperature)
}

void SetTemperature::SharedCtor() {
  _cached_size_ = 0;
  new_temp_ = 0;
}

SetTemperature::~SetTemperature() {
  // @@protoc_insertion_point(destructor:SetTemperature)
  SharedDtor();
}

void SetTemperature::SharedDtor() {
}

void SetTemperature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTemperature::descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetTemperature& SetTemperature::default_instance() {
  protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetTemperature* SetTemperature::New(::google::protobuf::Arena* arena) const {
  SetTemperature* n = new SetTemperature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:SetTemperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_temp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetTemperature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetTemperature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 new_temp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_new_temp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetTemperature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetTemperature)
  return false;
#undef DO_
}

void SetTemperature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetTemperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 new_temp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->new_temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetTemperature)
}

::google::protobuf::uint8* SetTemperature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SetTemperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 new_temp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->new_temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetTemperature)
  return target;
}

size_t SetTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetTemperature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 new_temp = 1;
  if (has_new_temp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_temp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTemperature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTemperature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTemperature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetTemperature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetTemperature)
    MergeFrom(*source);
  }
}

void SetTemperature::MergeFrom(const SetTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_temp()) {
    set_new_temp(from.new_temp());
  }
}

void SetTemperature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTemperature::CopyFrom(const SetTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTemperature::IsInitialized() const {
  return true;
}

void SetTemperature::Swap(SetTemperature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTemperature::InternalSwap(SetTemperature* other) {
  using std::swap;
  swap(new_temp_, other->new_temp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetTemperature::GetMetadata() const {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetTemperature

// optional int32 new_temp = 1;
bool SetTemperature::has_new_temp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetTemperature::set_has_new_temp() {
  _has_bits_[0] |= 0x00000001u;
}
void SetTemperature::clear_has_new_temp() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetTemperature::clear_new_temp() {
  new_temp_ = 0;
  clear_has_new_temp();
}
::google::protobuf::int32 SetTemperature::new_temp() const {
  // @@protoc_insertion_point(field_get:SetTemperature.new_temp)
  return new_temp_;
}
void SetTemperature::set_new_temp(::google::protobuf::int32 value) {
  set_has_new_temp();
  new_temp_ = value;
  // @@protoc_insertion_point(field_set:SetTemperature.new_temp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTemperatureResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTemperatureResult::SetTemperatureResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetTemperatureResult)
}
SetTemperatureResult::SetTemperatureResult(const SetTemperatureResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SetTemperatureResult)
}

void SetTemperatureResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

SetTemperatureResult::~SetTemperatureResult() {
  // @@protoc_insertion_point(destructor:SetTemperatureResult)
  SharedDtor();
}

void SetTemperatureResult::SharedDtor() {
}

void SetTemperatureResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTemperatureResult::descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetTemperatureResult& SetTemperatureResult::default_instance() {
  protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetTemperatureResult* SetTemperatureResult::New(::google::protobuf::Arena* arena) const {
  SetTemperatureResult* n = new SetTemperatureResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetTemperatureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SetTemperatureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetTemperatureResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetTemperatureResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SetTemperatureResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SetTemperatureResult_Result_IsValid(value)) {
            set_result(static_cast< ::SetTemperatureResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetTemperatureResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetTemperatureResult)
  return false;
#undef DO_
}

void SetTemperatureResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetTemperatureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SetTemperatureResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetTemperatureResult)
}

::google::protobuf::uint8* SetTemperatureResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SetTemperatureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SetTemperatureResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetTemperatureResult)
  return target;
}

size_t SetTemperatureResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetTemperatureResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SetTemperatureResult.Result result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTemperatureResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetTemperatureResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTemperatureResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTemperatureResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetTemperatureResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetTemperatureResult)
    MergeFrom(*source);
  }
}

void SetTemperatureResult::MergeFrom(const SetTemperatureResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetTemperatureResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void SetTemperatureResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetTemperatureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTemperatureResult::CopyFrom(const SetTemperatureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetTemperatureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTemperatureResult::IsInitialized() const {
  return true;
}

void SetTemperatureResult::Swap(SetTemperatureResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTemperatureResult::InternalSwap(SetTemperatureResult* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetTemperatureResult::GetMetadata() const {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetTemperatureResult

// optional .SetTemperatureResult.Result result = 1;
bool SetTemperatureResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetTemperatureResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void SetTemperatureResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetTemperatureResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::SetTemperatureResult_Result SetTemperatureResult::result() const {
  // @@protoc_insertion_point(field_get:SetTemperatureResult.result)
  return static_cast< ::SetTemperatureResult_Result >(result_);
}
void SetTemperatureResult::set_result(::SetTemperatureResult_Result value) {
  assert(::SetTemperatureResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SetTemperatureResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowTemperatureResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowTemperatureResult::ShowTemperatureResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShowTemperatureResult)
}
ShowTemperatureResult::ShowTemperatureResult(const ShowTemperatureResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ShowTemperatureResult)
}

void ShowTemperatureResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

ShowTemperatureResult::~ShowTemperatureResult() {
  // @@protoc_insertion_point(destructor:ShowTemperatureResult)
  SharedDtor();
}

void ShowTemperatureResult::SharedDtor() {
}

void ShowTemperatureResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowTemperatureResult::descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowTemperatureResult& ShowTemperatureResult::default_instance() {
  protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowTemperatureResult* ShowTemperatureResult::New(::google::protobuf::Arena* arena) const {
  ShowTemperatureResult* n = new ShowTemperatureResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowTemperatureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowTemperatureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShowTemperatureResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShowTemperatureResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ShowTemperatureResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ShowTemperatureResult_Result_IsValid(value)) {
            set_result(static_cast< ::ShowTemperatureResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShowTemperatureResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShowTemperatureResult)
  return false;
#undef DO_
}

void ShowTemperatureResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShowTemperatureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ShowTemperatureResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShowTemperatureResult)
}

::google::protobuf::uint8* ShowTemperatureResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShowTemperatureResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ShowTemperatureResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShowTemperatureResult)
  return target;
}

size_t ShowTemperatureResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShowTemperatureResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ShowTemperatureResult.Result result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowTemperatureResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShowTemperatureResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowTemperatureResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowTemperatureResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShowTemperatureResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShowTemperatureResult)
    MergeFrom(*source);
  }
}

void ShowTemperatureResult::MergeFrom(const ShowTemperatureResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShowTemperatureResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ShowTemperatureResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShowTemperatureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowTemperatureResult::CopyFrom(const ShowTemperatureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowTemperatureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowTemperatureResult::IsInitialized() const {
  return true;
}

void ShowTemperatureResult::Swap(ShowTemperatureResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowTemperatureResult::InternalSwap(ShowTemperatureResult* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowTemperatureResult::GetMetadata() const {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowTemperatureResult

// optional .ShowTemperatureResult.Result result = 1;
bool ShowTemperatureResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShowTemperatureResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ShowTemperatureResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShowTemperatureResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::ShowTemperatureResult_Result ShowTemperatureResult::result() const {
  // @@protoc_insertion_point(field_get:ShowTemperatureResult.result)
  return static_cast< ::ShowTemperatureResult_Result >(result_);
}
void ShowTemperatureResult::set_result(::ShowTemperatureResult_Result value) {
  assert(::ShowTemperatureResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:ShowTemperatureResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerOffResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerOffResult::PowerOffResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PowerOffResult)
}
PowerOffResult::PowerOffResult(const PowerOffResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PowerOffResult)
}

void PowerOffResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

PowerOffResult::~PowerOffResult() {
  // @@protoc_insertion_point(destructor:PowerOffResult)
  SharedDtor();
}

void PowerOffResult::SharedDtor() {
}

void PowerOffResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerOffResult::descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerOffResult& PowerOffResult::default_instance() {
  protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

PowerOffResult* PowerOffResult::New(::google::protobuf::Arena* arena) const {
  PowerOffResult* n = new PowerOffResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerOffResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PowerOffResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PowerOffResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PowerOffResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PowerOffResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PowerOffResult_Result_IsValid(value)) {
            set_result(static_cast< ::PowerOffResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PowerOffResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PowerOffResult)
  return false;
#undef DO_
}

void PowerOffResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PowerOffResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PowerOffResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PowerOffResult)
}

::google::protobuf::uint8* PowerOffResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PowerOffResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PowerOffResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PowerOffResult)
  return target;
}

size_t PowerOffResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PowerOffResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .PowerOffResult.Result result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerOffResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PowerOffResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerOffResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerOffResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PowerOffResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PowerOffResult)
    MergeFrom(*source);
  }
}

void PowerOffResult::MergeFrom(const PowerOffResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PowerOffResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void PowerOffResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PowerOffResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerOffResult::CopyFrom(const PowerOffResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PowerOffResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerOffResult::IsInitialized() const {
  return true;
}

void PowerOffResult::Swap(PowerOffResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerOffResult::InternalSwap(PowerOffResult* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerOffResult::GetMetadata() const {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerOffResult

// optional .PowerOffResult.Result result = 1;
bool PowerOffResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PowerOffResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void PowerOffResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void PowerOffResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::PowerOffResult_Result PowerOffResult::result() const {
  // @@protoc_insertion_point(field_get:PowerOffResult.result)
  return static_cast< ::PowerOffResult_Result >(result_);
}
void PowerOffResult::set_result(::PowerOffResult_Result value) {
  assert(::PowerOffResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PowerOffResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnOffDisplayResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnOffDisplayResult::TurnOffDisplayResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TurnOffDisplayResult)
}
TurnOffDisplayResult::TurnOffDisplayResult(const TurnOffDisplayResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TurnOffDisplayResult)
}

void TurnOffDisplayResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

TurnOffDisplayResult::~TurnOffDisplayResult() {
  // @@protoc_insertion_point(destructor:TurnOffDisplayResult)
  SharedDtor();
}

void TurnOffDisplayResult::SharedDtor() {
}

void TurnOffDisplayResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnOffDisplayResult::descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TurnOffDisplayResult& TurnOffDisplayResult::default_instance() {
  protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

TurnOffDisplayResult* TurnOffDisplayResult::New(::google::protobuf::Arena* arena) const {
  TurnOffDisplayResult* n = new TurnOffDisplayResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TurnOffDisplayResult::Clear() {
// @@protoc_insertion_point(message_clear_start:TurnOffDisplayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TurnOffDisplayResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TurnOffDisplayResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TurnOffDisplayResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TurnOffDisplayResult_Result_IsValid(value)) {
            set_result(static_cast< ::TurnOffDisplayResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TurnOffDisplayResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TurnOffDisplayResult)
  return false;
#undef DO_
}

void TurnOffDisplayResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TurnOffDisplayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TurnOffDisplayResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TurnOffDisplayResult)
}

::google::protobuf::uint8* TurnOffDisplayResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TurnOffDisplayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TurnOffDisplayResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TurnOffDisplayResult)
  return target;
}

size_t TurnOffDisplayResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TurnOffDisplayResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .TurnOffDisplayResult.Result result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnOffDisplayResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TurnOffDisplayResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TurnOffDisplayResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TurnOffDisplayResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TurnOffDisplayResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TurnOffDisplayResult)
    MergeFrom(*source);
  }
}

void TurnOffDisplayResult::MergeFrom(const TurnOffDisplayResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TurnOffDisplayResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TurnOffDisplayResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TurnOffDisplayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnOffDisplayResult::CopyFrom(const TurnOffDisplayResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TurnOffDisplayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnOffDisplayResult::IsInitialized() const {
  return true;
}

void TurnOffDisplayResult::Swap(TurnOffDisplayResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnOffDisplayResult::InternalSwap(TurnOffDisplayResult* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TurnOffDisplayResult::GetMetadata() const {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TurnOffDisplayResult

// optional .TurnOffDisplayResult.Result result = 1;
bool TurnOffDisplayResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TurnOffDisplayResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TurnOffDisplayResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TurnOffDisplayResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::TurnOffDisplayResult_Result TurnOffDisplayResult::result() const {
  // @@protoc_insertion_point(field_get:TurnOffDisplayResult.result)
  return static_cast< ::TurnOffDisplayResult_Result >(result_);
}
void TurnOffDisplayResult::set_result(::TurnOffDisplayResult_Result value) {
  assert(::TurnOffDisplayResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TurnOffDisplayResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerOnResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerOnResult::PowerOnResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PowerOnResult)
}
PowerOnResult::PowerOnResult(const PowerOnResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PowerOnResult)
}

void PowerOnResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

PowerOnResult::~PowerOnResult() {
  // @@protoc_insertion_point(destructor:PowerOnResult)
  SharedDtor();
}

void PowerOnResult::SharedDtor() {
}

void PowerOnResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerOnResult::descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerOnResult& PowerOnResult::default_instance() {
  protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

PowerOnResult* PowerOnResult::New(::google::protobuf::Arena* arena) const {
  PowerOnResult* n = new PowerOnResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerOnResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PowerOnResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PowerOnResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PowerOnResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PowerOnResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PowerOnResult_Result_IsValid(value)) {
            set_result(static_cast< ::PowerOnResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PowerOnResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PowerOnResult)
  return false;
#undef DO_
}

void PowerOnResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PowerOnResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PowerOnResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PowerOnResult)
}

::google::protobuf::uint8* PowerOnResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PowerOnResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PowerOnResult.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PowerOnResult)
  return target;
}

size_t PowerOnResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PowerOnResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .PowerOnResult.Result result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerOnResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PowerOnResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerOnResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerOnResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PowerOnResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PowerOnResult)
    MergeFrom(*source);
  }
}

void PowerOnResult::MergeFrom(const PowerOnResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PowerOnResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void PowerOnResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PowerOnResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerOnResult::CopyFrom(const PowerOnResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PowerOnResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerOnResult::IsInitialized() const {
  return true;
}

void PowerOnResult::Swap(PowerOnResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerOnResult::InternalSwap(PowerOnResult* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerOnResult::GetMetadata() const {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerOnResult

// optional .PowerOnResult.Result result = 1;
bool PowerOnResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PowerOnResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void PowerOnResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void PowerOnResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::PowerOnResult_Result PowerOnResult::result() const {
  // @@protoc_insertion_point(field_get:PowerOnResult.result)
  return static_cast< ::PowerOnResult_Result >(result_);
}
void PowerOnResult::set_result(::PowerOnResult_Result value) {
  assert(::PowerOnResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PowerOnResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemCtrlMessagge::kMessageIdFieldNumber;
const int SystemCtrlMessagge::kMsgSetTemperatureFieldNumber;
const int SystemCtrlMessagge::kMsgSetTemperatureResultFieldNumber;
const int SystemCtrlMessagge::kMsgShowTemperatureResultFieldNumber;
const int SystemCtrlMessagge::kMsgPowerOffResultFieldNumber;
const int SystemCtrlMessagge::kMsgTurnOffDisplayResultFieldNumber;
const int SystemCtrlMessagge::kMsgPowerOnResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemCtrlMessagge::SystemCtrlMessagge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SystemCtrlMessagge)
}
SystemCtrlMessagge::SystemCtrlMessagge(const SystemCtrlMessagge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_id_ = from.message_id_;
  clear_has_msg_body();
  switch (from.msg_body_case()) {
    case kMsgSetTemperature: {
      mutable_msg_set_temperature()->::SetTemperature::MergeFrom(from.msg_set_temperature());
      break;
    }
    case kMsgSetTemperatureResult: {
      mutable_msg_set_temperature_result()->::SetTemperatureResult::MergeFrom(from.msg_set_temperature_result());
      break;
    }
    case kMsgShowTemperatureResult: {
      mutable_msg_show_temperature_result()->::ShowTemperatureResult::MergeFrom(from.msg_show_temperature_result());
      break;
    }
    case kMsgPowerOffResult: {
      mutable_msg_power_off_result()->::PowerOffResult::MergeFrom(from.msg_power_off_result());
      break;
    }
    case kMsgTurnOffDisplayResult: {
      mutable_msg_turn_off_display_result()->::TurnOffDisplayResult::MergeFrom(from.msg_turn_off_display_result());
      break;
    }
    case kMsgPowerOnResult: {
      mutable_msg_power_on_result()->::PowerOnResult::MergeFrom(from.msg_power_on_result());
      break;
    }
    case MSG_BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SystemCtrlMessagge)
}

void SystemCtrlMessagge::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0;
  clear_has_msg_body();
}

SystemCtrlMessagge::~SystemCtrlMessagge() {
  // @@protoc_insertion_point(destructor:SystemCtrlMessagge)
  SharedDtor();
}

void SystemCtrlMessagge::SharedDtor() {
  if (has_msg_body()) {
    clear_msg_body();
  }
}

void SystemCtrlMessagge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemCtrlMessagge::descriptor() {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemCtrlMessagge& SystemCtrlMessagge::default_instance() {
  protobuf_SystemCtrlMessageDef_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemCtrlMessagge* SystemCtrlMessagge::New(::google::protobuf::Arena* arena) const {
  SystemCtrlMessagge* n = new SystemCtrlMessagge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemCtrlMessagge::clear_msg_body() {
// @@protoc_insertion_point(one_of_clear_start:SystemCtrlMessagge)
  switch (msg_body_case()) {
    case kMsgSetTemperature: {
      delete msg_body_.msg_set_temperature_;
      break;
    }
    case kMsgSetTemperatureResult: {
      delete msg_body_.msg_set_temperature_result_;
      break;
    }
    case kMsgShowTemperatureResult: {
      delete msg_body_.msg_show_temperature_result_;
      break;
    }
    case kMsgPowerOffResult: {
      delete msg_body_.msg_power_off_result_;
      break;
    }
    case kMsgTurnOffDisplayResult: {
      delete msg_body_.msg_turn_off_display_result_;
      break;
    }
    case kMsgPowerOnResult: {
      delete msg_body_.msg_power_on_result_;
      break;
    }
    case MSG_BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_BODY_NOT_SET;
}


void SystemCtrlMessagge::Clear() {
// @@protoc_insertion_point(message_clear_start:SystemCtrlMessagge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_ = 0;
  clear_msg_body();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemCtrlMessagge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SystemCtrlMessagge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SetTemperature msg_set_temperature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_set_temperature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SetTemperatureResult msg_set_temperature_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_set_temperature_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ShowTemperatureResult msg_show_temperature_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_show_temperature_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PowerOffResult msg_power_off_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_power_off_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TurnOffDisplayResult msg_turn_off_display_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_turn_off_display_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PowerOnResult msg_power_on_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_power_on_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SystemCtrlMessagge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SystemCtrlMessagge)
  return false;
#undef DO_
}

void SystemCtrlMessagge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SystemCtrlMessagge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  switch (msg_body_case()) {
    case kMsgSetTemperature:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *msg_body_.msg_set_temperature_, output);
      break;
    case kMsgSetTemperatureResult:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *msg_body_.msg_set_temperature_result_, output);
      break;
    case kMsgShowTemperatureResult:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *msg_body_.msg_show_temperature_result_, output);
      break;
    case kMsgPowerOffResult:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *msg_body_.msg_power_off_result_, output);
      break;
    case kMsgTurnOffDisplayResult:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *msg_body_.msg_turn_off_display_result_, output);
      break;
    case kMsgPowerOnResult:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *msg_body_.msg_power_on_result_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SystemCtrlMessagge)
}

::google::protobuf::uint8* SystemCtrlMessagge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SystemCtrlMessagge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  switch (msg_body_case()) {
    case kMsgSetTemperature:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *msg_body_.msg_set_temperature_, deterministic, target);
      break;
    case kMsgSetTemperatureResult:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *msg_body_.msg_set_temperature_result_, deterministic, target);
      break;
    case kMsgShowTemperatureResult:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *msg_body_.msg_show_temperature_result_, deterministic, target);
      break;
    case kMsgPowerOffResult:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *msg_body_.msg_power_off_result_, deterministic, target);
      break;
    case kMsgTurnOffDisplayResult:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *msg_body_.msg_turn_off_display_result_, deterministic, target);
      break;
    case kMsgPowerOnResult:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *msg_body_.msg_power_on_result_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SystemCtrlMessagge)
  return target;
}

size_t SystemCtrlMessagge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SystemCtrlMessagge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 message_id = 1;
  if (has_message_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_id());
  }
  switch (msg_body_case()) {
    // optional .SetTemperature msg_set_temperature = 2;
    case kMsgSetTemperature: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_body_.msg_set_temperature_);
      break;
    }
    // optional .SetTemperatureResult msg_set_temperature_result = 3;
    case kMsgSetTemperatureResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_body_.msg_set_temperature_result_);
      break;
    }
    // optional .ShowTemperatureResult msg_show_temperature_result = 4;
    case kMsgShowTemperatureResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_body_.msg_show_temperature_result_);
      break;
    }
    // optional .PowerOffResult msg_power_off_result = 5;
    case kMsgPowerOffResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_body_.msg_power_off_result_);
      break;
    }
    // optional .TurnOffDisplayResult msg_turn_off_display_result = 6;
    case kMsgTurnOffDisplayResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_body_.msg_turn_off_display_result_);
      break;
    }
    // optional .PowerOnResult msg_power_on_result = 7;
    case kMsgPowerOnResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_body_.msg_power_on_result_);
      break;
    }
    case MSG_BODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemCtrlMessagge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SystemCtrlMessagge)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemCtrlMessagge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemCtrlMessagge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SystemCtrlMessagge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SystemCtrlMessagge)
    MergeFrom(*source);
  }
}

void SystemCtrlMessagge::MergeFrom(const SystemCtrlMessagge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SystemCtrlMessagge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_id()) {
    set_message_id(from.message_id());
  }
  switch (from.msg_body_case()) {
    case kMsgSetTemperature: {
      mutable_msg_set_temperature()->::SetTemperature::MergeFrom(from.msg_set_temperature());
      break;
    }
    case kMsgSetTemperatureResult: {
      mutable_msg_set_temperature_result()->::SetTemperatureResult::MergeFrom(from.msg_set_temperature_result());
      break;
    }
    case kMsgShowTemperatureResult: {
      mutable_msg_show_temperature_result()->::ShowTemperatureResult::MergeFrom(from.msg_show_temperature_result());
      break;
    }
    case kMsgPowerOffResult: {
      mutable_msg_power_off_result()->::PowerOffResult::MergeFrom(from.msg_power_off_result());
      break;
    }
    case kMsgTurnOffDisplayResult: {
      mutable_msg_turn_off_display_result()->::TurnOffDisplayResult::MergeFrom(from.msg_turn_off_display_result());
      break;
    }
    case kMsgPowerOnResult: {
      mutable_msg_power_on_result()->::PowerOnResult::MergeFrom(from.msg_power_on_result());
      break;
    }
    case MSG_BODY_NOT_SET: {
      break;
    }
  }
}

void SystemCtrlMessagge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SystemCtrlMessagge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemCtrlMessagge::CopyFrom(const SystemCtrlMessagge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SystemCtrlMessagge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemCtrlMessagge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SystemCtrlMessagge::Swap(SystemCtrlMessagge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemCtrlMessagge::InternalSwap(SystemCtrlMessagge* other) {
  using std::swap;
  swap(message_id_, other->message_id_);
  swap(msg_body_, other->msg_body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemCtrlMessagge::GetMetadata() const {
  protobuf_SystemCtrlMessageDef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SystemCtrlMessageDef_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemCtrlMessagge

// required int32 message_id = 1;
bool SystemCtrlMessagge::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemCtrlMessagge::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SystemCtrlMessagge::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SystemCtrlMessagge::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
::google::protobuf::int32 SystemCtrlMessagge::message_id() const {
  // @@protoc_insertion_point(field_get:SystemCtrlMessagge.message_id)
  return message_id_;
}
void SystemCtrlMessagge::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:SystemCtrlMessagge.message_id)
}

// optional .SetTemperature msg_set_temperature = 2;
bool SystemCtrlMessagge::has_msg_set_temperature() const {
  return msg_body_case() == kMsgSetTemperature;
}
void SystemCtrlMessagge::set_has_msg_set_temperature() {
  _oneof_case_[0] = kMsgSetTemperature;
}
void SystemCtrlMessagge::clear_msg_set_temperature() {
  if (has_msg_set_temperature()) {
    delete msg_body_.msg_set_temperature_;
    clear_has_msg_body();
  }
}
 const ::SetTemperature& SystemCtrlMessagge::msg_set_temperature() const {
  // @@protoc_insertion_point(field_get:SystemCtrlMessagge.msg_set_temperature)
  return has_msg_set_temperature()
      ? *msg_body_.msg_set_temperature_
      : ::SetTemperature::default_instance();
}
::SetTemperature* SystemCtrlMessagge::mutable_msg_set_temperature() {
  if (!has_msg_set_temperature()) {
    clear_msg_body();
    set_has_msg_set_temperature();
    msg_body_.msg_set_temperature_ = new ::SetTemperature;
  }
  // @@protoc_insertion_point(field_mutable:SystemCtrlMessagge.msg_set_temperature)
  return msg_body_.msg_set_temperature_;
}
::SetTemperature* SystemCtrlMessagge::release_msg_set_temperature() {
  // @@protoc_insertion_point(field_release:SystemCtrlMessagge.msg_set_temperature)
  if (has_msg_set_temperature()) {
    clear_has_msg_body();
    ::SetTemperature* temp = msg_body_.msg_set_temperature_;
    msg_body_.msg_set_temperature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SystemCtrlMessagge::set_allocated_msg_set_temperature(::SetTemperature* msg_set_temperature) {
  clear_msg_body();
  if (msg_set_temperature) {
    set_has_msg_set_temperature();
    msg_body_.msg_set_temperature_ = msg_set_temperature;
  }
  // @@protoc_insertion_point(field_set_allocated:SystemCtrlMessagge.msg_set_temperature)
}

// optional .SetTemperatureResult msg_set_temperature_result = 3;
bool SystemCtrlMessagge::has_msg_set_temperature_result() const {
  return msg_body_case() == kMsgSetTemperatureResult;
}
void SystemCtrlMessagge::set_has_msg_set_temperature_result() {
  _oneof_case_[0] = kMsgSetTemperatureResult;
}
void SystemCtrlMessagge::clear_msg_set_temperature_result() {
  if (has_msg_set_temperature_result()) {
    delete msg_body_.msg_set_temperature_result_;
    clear_has_msg_body();
  }
}
 const ::SetTemperatureResult& SystemCtrlMessagge::msg_set_temperature_result() const {
  // @@protoc_insertion_point(field_get:SystemCtrlMessagge.msg_set_temperature_result)
  return has_msg_set_temperature_result()
      ? *msg_body_.msg_set_temperature_result_
      : ::SetTemperatureResult::default_instance();
}
::SetTemperatureResult* SystemCtrlMessagge::mutable_msg_set_temperature_result() {
  if (!has_msg_set_temperature_result()) {
    clear_msg_body();
    set_has_msg_set_temperature_result();
    msg_body_.msg_set_temperature_result_ = new ::SetTemperatureResult;
  }
  // @@protoc_insertion_point(field_mutable:SystemCtrlMessagge.msg_set_temperature_result)
  return msg_body_.msg_set_temperature_result_;
}
::SetTemperatureResult* SystemCtrlMessagge::release_msg_set_temperature_result() {
  // @@protoc_insertion_point(field_release:SystemCtrlMessagge.msg_set_temperature_result)
  if (has_msg_set_temperature_result()) {
    clear_has_msg_body();
    ::SetTemperatureResult* temp = msg_body_.msg_set_temperature_result_;
    msg_body_.msg_set_temperature_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SystemCtrlMessagge::set_allocated_msg_set_temperature_result(::SetTemperatureResult* msg_set_temperature_result) {
  clear_msg_body();
  if (msg_set_temperature_result) {
    set_has_msg_set_temperature_result();
    msg_body_.msg_set_temperature_result_ = msg_set_temperature_result;
  }
  // @@protoc_insertion_point(field_set_allocated:SystemCtrlMessagge.msg_set_temperature_result)
}

// optional .ShowTemperatureResult msg_show_temperature_result = 4;
bool SystemCtrlMessagge::has_msg_show_temperature_result() const {
  return msg_body_case() == kMsgShowTemperatureResult;
}
void SystemCtrlMessagge::set_has_msg_show_temperature_result() {
  _oneof_case_[0] = kMsgShowTemperatureResult;
}
void SystemCtrlMessagge::clear_msg_show_temperature_result() {
  if (has_msg_show_temperature_result()) {
    delete msg_body_.msg_show_temperature_result_;
    clear_has_msg_body();
  }
}
 const ::ShowTemperatureResult& SystemCtrlMessagge::msg_show_temperature_result() const {
  // @@protoc_insertion_point(field_get:SystemCtrlMessagge.msg_show_temperature_result)
  return has_msg_show_temperature_result()
      ? *msg_body_.msg_show_temperature_result_
      : ::ShowTemperatureResult::default_instance();
}
::ShowTemperatureResult* SystemCtrlMessagge::mutable_msg_show_temperature_result() {
  if (!has_msg_show_temperature_result()) {
    clear_msg_body();
    set_has_msg_show_temperature_result();
    msg_body_.msg_show_temperature_result_ = new ::ShowTemperatureResult;
  }
  // @@protoc_insertion_point(field_mutable:SystemCtrlMessagge.msg_show_temperature_result)
  return msg_body_.msg_show_temperature_result_;
}
::ShowTemperatureResult* SystemCtrlMessagge::release_msg_show_temperature_result() {
  // @@protoc_insertion_point(field_release:SystemCtrlMessagge.msg_show_temperature_result)
  if (has_msg_show_temperature_result()) {
    clear_has_msg_body();
    ::ShowTemperatureResult* temp = msg_body_.msg_show_temperature_result_;
    msg_body_.msg_show_temperature_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SystemCtrlMessagge::set_allocated_msg_show_temperature_result(::ShowTemperatureResult* msg_show_temperature_result) {
  clear_msg_body();
  if (msg_show_temperature_result) {
    set_has_msg_show_temperature_result();
    msg_body_.msg_show_temperature_result_ = msg_show_temperature_result;
  }
  // @@protoc_insertion_point(field_set_allocated:SystemCtrlMessagge.msg_show_temperature_result)
}

// optional .PowerOffResult msg_power_off_result = 5;
bool SystemCtrlMessagge::has_msg_power_off_result() const {
  return msg_body_case() == kMsgPowerOffResult;
}
void SystemCtrlMessagge::set_has_msg_power_off_result() {
  _oneof_case_[0] = kMsgPowerOffResult;
}
void SystemCtrlMessagge::clear_msg_power_off_result() {
  if (has_msg_power_off_result()) {
    delete msg_body_.msg_power_off_result_;
    clear_has_msg_body();
  }
}
 const ::PowerOffResult& SystemCtrlMessagge::msg_power_off_result() const {
  // @@protoc_insertion_point(field_get:SystemCtrlMessagge.msg_power_off_result)
  return has_msg_power_off_result()
      ? *msg_body_.msg_power_off_result_
      : ::PowerOffResult::default_instance();
}
::PowerOffResult* SystemCtrlMessagge::mutable_msg_power_off_result() {
  if (!has_msg_power_off_result()) {
    clear_msg_body();
    set_has_msg_power_off_result();
    msg_body_.msg_power_off_result_ = new ::PowerOffResult;
  }
  // @@protoc_insertion_point(field_mutable:SystemCtrlMessagge.msg_power_off_result)
  return msg_body_.msg_power_off_result_;
}
::PowerOffResult* SystemCtrlMessagge::release_msg_power_off_result() {
  // @@protoc_insertion_point(field_release:SystemCtrlMessagge.msg_power_off_result)
  if (has_msg_power_off_result()) {
    clear_has_msg_body();
    ::PowerOffResult* temp = msg_body_.msg_power_off_result_;
    msg_body_.msg_power_off_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SystemCtrlMessagge::set_allocated_msg_power_off_result(::PowerOffResult* msg_power_off_result) {
  clear_msg_body();
  if (msg_power_off_result) {
    set_has_msg_power_off_result();
    msg_body_.msg_power_off_result_ = msg_power_off_result;
  }
  // @@protoc_insertion_point(field_set_allocated:SystemCtrlMessagge.msg_power_off_result)
}

// optional .TurnOffDisplayResult msg_turn_off_display_result = 6;
bool SystemCtrlMessagge::has_msg_turn_off_display_result() const {
  return msg_body_case() == kMsgTurnOffDisplayResult;
}
void SystemCtrlMessagge::set_has_msg_turn_off_display_result() {
  _oneof_case_[0] = kMsgTurnOffDisplayResult;
}
void SystemCtrlMessagge::clear_msg_turn_off_display_result() {
  if (has_msg_turn_off_display_result()) {
    delete msg_body_.msg_turn_off_display_result_;
    clear_has_msg_body();
  }
}
 const ::TurnOffDisplayResult& SystemCtrlMessagge::msg_turn_off_display_result() const {
  // @@protoc_insertion_point(field_get:SystemCtrlMessagge.msg_turn_off_display_result)
  return has_msg_turn_off_display_result()
      ? *msg_body_.msg_turn_off_display_result_
      : ::TurnOffDisplayResult::default_instance();
}
::TurnOffDisplayResult* SystemCtrlMessagge::mutable_msg_turn_off_display_result() {
  if (!has_msg_turn_off_display_result()) {
    clear_msg_body();
    set_has_msg_turn_off_display_result();
    msg_body_.msg_turn_off_display_result_ = new ::TurnOffDisplayResult;
  }
  // @@protoc_insertion_point(field_mutable:SystemCtrlMessagge.msg_turn_off_display_result)
  return msg_body_.msg_turn_off_display_result_;
}
::TurnOffDisplayResult* SystemCtrlMessagge::release_msg_turn_off_display_result() {
  // @@protoc_insertion_point(field_release:SystemCtrlMessagge.msg_turn_off_display_result)
  if (has_msg_turn_off_display_result()) {
    clear_has_msg_body();
    ::TurnOffDisplayResult* temp = msg_body_.msg_turn_off_display_result_;
    msg_body_.msg_turn_off_display_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SystemCtrlMessagge::set_allocated_msg_turn_off_display_result(::TurnOffDisplayResult* msg_turn_off_display_result) {
  clear_msg_body();
  if (msg_turn_off_display_result) {
    set_has_msg_turn_off_display_result();
    msg_body_.msg_turn_off_display_result_ = msg_turn_off_display_result;
  }
  // @@protoc_insertion_point(field_set_allocated:SystemCtrlMessagge.msg_turn_off_display_result)
}

// optional .PowerOnResult msg_power_on_result = 7;
bool SystemCtrlMessagge::has_msg_power_on_result() const {
  return msg_body_case() == kMsgPowerOnResult;
}
void SystemCtrlMessagge::set_has_msg_power_on_result() {
  _oneof_case_[0] = kMsgPowerOnResult;
}
void SystemCtrlMessagge::clear_msg_power_on_result() {
  if (has_msg_power_on_result()) {
    delete msg_body_.msg_power_on_result_;
    clear_has_msg_body();
  }
}
 const ::PowerOnResult& SystemCtrlMessagge::msg_power_on_result() const {
  // @@protoc_insertion_point(field_get:SystemCtrlMessagge.msg_power_on_result)
  return has_msg_power_on_result()
      ? *msg_body_.msg_power_on_result_
      : ::PowerOnResult::default_instance();
}
::PowerOnResult* SystemCtrlMessagge::mutable_msg_power_on_result() {
  if (!has_msg_power_on_result()) {
    clear_msg_body();
    set_has_msg_power_on_result();
    msg_body_.msg_power_on_result_ = new ::PowerOnResult;
  }
  // @@protoc_insertion_point(field_mutable:SystemCtrlMessagge.msg_power_on_result)
  return msg_body_.msg_power_on_result_;
}
::PowerOnResult* SystemCtrlMessagge::release_msg_power_on_result() {
  // @@protoc_insertion_point(field_release:SystemCtrlMessagge.msg_power_on_result)
  if (has_msg_power_on_result()) {
    clear_has_msg_body();
    ::PowerOnResult* temp = msg_body_.msg_power_on_result_;
    msg_body_.msg_power_on_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SystemCtrlMessagge::set_allocated_msg_power_on_result(::PowerOnResult* msg_power_on_result) {
  clear_msg_body();
  if (msg_power_on_result) {
    set_has_msg_power_on_result();
    msg_body_.msg_power_on_result_ = msg_power_on_result;
  }
  // @@protoc_insertion_point(field_set_allocated:SystemCtrlMessagge.msg_power_on_result)
}

bool SystemCtrlMessagge::has_msg_body() const {
  return msg_body_case() != MSG_BODY_NOT_SET;
}
void SystemCtrlMessagge::clear_has_msg_body() {
  _oneof_case_[0] = MSG_BODY_NOT_SET;
}
SystemCtrlMessagge::MsgBodyCase SystemCtrlMessagge::msg_body_case() const {
  return SystemCtrlMessagge::MsgBodyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
